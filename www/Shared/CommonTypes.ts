// Generated from www/Shared/Enums.ts by scripts/gen.ts

export const Keys = Object.freeze({
  AddFileLocation: 'O',
  Albums: '2',
  Artists: '3',
  Backward10s: '[',
  Find: 'F',
  Forward10s: ']',
  NextTrack: 'Right',
  NowPlaying: '1',
  Play: 'P',
  Playlists: '5',
  PreviousTrack: 'Left',
  Repeat: 'T',
  SavePlaylist: 'S',
  Settings: ',',
  Shuffle: 'R',
  Songs: '4',
  ToggleMiniPlayer: '9',
  Tools: 'L',
});
export type Keys = (typeof Keys)[keyof typeof Keys];

export const StrId = Object.freeze({
  Mono: 'mono',
  Stereo: 'stereo',
  Quadrophonic: 'quadrophonic',
  Channels: ' channels',
  BitDepth: 'bit',
  FilePath: 'File Path',
  Duration: 'Duration:',
  MDHeaderField: 'Field',
  MDHeaderValue: 'Value',
  FilesSelected: 'Files Selected',
  RawMetadata: 'Raw Metadata',
  ChooseCoverArt: 'Select Cover Art Image',
  ImageName: 'Images',
  ErrNotSingleAndNotMultiple: 'Not Single and not Multiple (This is a bug!)',
  ErrSingleAndMultiple: 'Both Single and Multiple (This is a bug!)',
  Title: 'Title',
  ArtistTooltip:
    "Multiple artists are specified like this: 'Artist 1, Artist 2 & Artist 3'",
  Artists: 'Artist(s)',
  Album: 'Album',
  Year: 'Year',
  TrackNum: 'Track #',
  DiskNum: 'Disk #',
  DiskName: 'Disk Name',
  Compilation: 'Compilation',
  Soundtrack: 'Soundtrack',
  AdditionalArtists: 'Additional Artist(s)',
  VariationsTooltip: 'Separate vartiations with a semicolon',
  Variations: 'Variation(s)',
  AlbumCover: 'Album Cover',
  ChooseFile: 'Choose File...',
  FromClipboard: 'From Clipboard',
  ViewNowPlaying: 'Now Playing',
  ViewAlbums: 'Albums',
  ViewArtists: 'Artists',
  ViewSongs: 'All Songs',
  ViewPlaylists: 'Playlists',
  ViewSettings: 'Settings',
  ViewTools: 'Tools',
  ImportFiles: 'Import Files...',
});
export type StrId = (typeof StrId)[keyof typeof StrId];

export const CurrentView = Object.freeze({
  disabled: -1,
  none: 0,
  recent: 1,
  albums: 2,
  artists: 3,
  songs: 4,
  playlists: 5,
  now_playing: 6,
  settings: 7,
  search: 8,
  tools: 9,
});
export type CurrentView = (typeof CurrentView)[keyof typeof CurrentView];

export const IpcId = Object.freeze({
  ClearHates: 'clear-hates',
  ClearLikes: 'clear-likes',
  ClearLocalOverrides: 'clear-local-overrides',
  DeletePlaylist: 'delete-playlist',
  FlushImageCache: 'flush-image-cache',
  FlushMetadataCache: 'flush-metadata-cache',
  GetHates: 'get-hates',
  GetLikes: 'get-likes',
  GetMediaInfo: 'media-info',
  GetMusicDatabase: 'get-music-database',
  GetPlaylists: 'get-playlists',
  LoadPlaylist: 'load-playlist',
  ManualRescan: 'manual-rescan',
  MenuAction: 'menuAction',
  MusicDBUpdate: 'music-database-update',
  RenamePlaylist: 'rename-playlist',
  SavePlaylist: 'save-playlist',
  Search: 'search',
  SetHates: 'set-hates',
  SetLikes: 'set-likes',
  SetMediaInfo: 'set-media-info',
  SetPlaylists: 'set-playlists',
  SetSaveMenu: 'set-save-menu',
  ShowFile: 'show-file',
  ShowLocFromKey: 'show-location-from-key',
  ShowMenu: 'show-menu',
  SubstrSearch: 'subsearch',
  TranscodingUpdate: 'get-xcode-update',
  TranscodingBegin: 'start-xcode',
  UploadImage: 'upload-image',
  MinimizeWindow: 'minimize-window',
  MaximizeWindow: 'maximize-window',
  RestoreWindow: 'restore-window',
  CloseWindow: 'close-window',
  GetPicUri: 'get-pic-uri',
  GetIgnoreList: 'get-ignore-list',
  AddIgnoreItem: 'add-ignore-item',
  RemoveIgnoreItem: 'del-ignore-item',
  PushIgnoreList: 'push-ignore-list',
  IgnoreListId: 'ignore-list',
  RescanInProgress: 'rescan-in-progress',
});
export type IpcId = (typeof IpcId)[keyof typeof IpcId];

export const IgnoreItemType = Object.freeze({
  PathRoot: 'path-root',
  PathKeyword: 'path-keyword',
  DirName: 'dir-name',
});
export type IgnoreItemType =
  (typeof IgnoreItemType)[keyof typeof IgnoreItemType];

// End of generated code

// DO NOT EDIT THIS FILE DIRECTLY!!!
// This file is generated from www/Shared/Definitions.ts by running 'bun gen'
// If you need to change this file, edit www/Shared/Definitions.ts and run
// 'bun gen' again. Or, if you need to change the generation process, edit
// scripts/emitters/typescript.ts and run 'bun gen' again.
// DO NOT EDIT THIS FILE DIRECTLY!!!
export const Keys = Object.freeze({
  AddFileLocation: 'O',
  Albums: '2',
  Artists: '3',
  Backward10s: '[',
  Find: 'F',
  Forward10s: ']',
  NextTrack: 'Right',
  NowPlaying: '1',
  Play: 'P',
  Playlists: '5',
  PreviousTrack: 'Left',
  Repeat: 'T',
  SavePlaylist: 'S',
  Settings: ',',
  Shuffle: 'R',
  Songs: '4',
  ToggleMiniPlayer: '9',
  Tools: 'L',
});
export type Keys = (typeof Keys)[keyof typeof Keys];

export const StrId = Object.freeze({
  Mono: 'mono',
  Stereo: 'stereo',
  Quadrophonic: 'quadrophonic',
  Channels: ' channels',
  BitDepth: 'bit',
  FilePath: 'File Path',
  Duration: 'Duration:',
  MDHeaderField: 'Field',
  MDHeaderValue: 'Value',
  FilesSelected: 'Files Selected',
  RawMetadata: 'Raw Metadata',
  ChooseCoverArt: 'Select Cover Art Image',
  ImageName: 'Images',
  ErrNotSingleAndNotMultiple: 'Not Single and not Multiple (This is a bug!)',
  ErrSingleAndMultiple: 'Both Single and Multiple (This is a bug!)',
  Title: 'Title',
  ArtistTooltip:
    "Multiple artists are specified like this: 'Artist 1, Artist 2 & Artist 3'",
  Artists: 'Artist(s)',
  Album: 'Album',
  Year: 'Year',
  TrackNum: 'Track #',
  DiskNum: 'Disk #',
  DiskName: 'Disk Name',
  Compilation: 'Compilation',
  Soundtrack: 'Soundtrack',
  AdditionalArtists: 'Additional Artist(s)',
  VariationsTooltip: 'Separate vartiations with a semicolon',
  Variations: 'Variation(s)',
  AlbumCover: 'Album Cover',
  ChooseFile: 'Choose File...',
  FromClipboard: 'From Clipboard',
  ViewNowPlaying: 'Now Playing',
  ViewAlbums: 'Albums',
  ViewArtists: 'Artists',
  ViewSongs: 'All Songs',
  ViewPlaylists: 'Playlists',
  ViewSettings: 'Settings',
  ViewTools: 'Tools',
  ImportFiles: 'Import Files...',
});
export type StrId = (typeof StrId)[keyof typeof StrId];

export const CurrentView = Object.freeze({
  disabled: -1,
  none: 0,
  recent: 1,
  albums: 2,
  artists: 3,
  songs: 4,
  playlists: 5,
  now_playing: 6,
  settings: 7,
  search: 8,
  tools: 9,
});
export type CurrentView = (typeof CurrentView)[keyof typeof CurrentView];

export const IpcCall = Object.freeze({
  ReadFromStorage: 0,
  WriteToStorage: 1,
  DeleteFromStorage: 2,
  AsyncData: 3,
  IsDev: 4,
  ClearHates: 5,
  ClearLikes: 6,
  ClearLocalOverrides: 7,
  DeletePlaylist: 8,
  FlushImageCache: 9,
  FlushMetadataCache: 10,
  GetHates: 11,
  GetLikes: 12,
  GetMediaInfo: 13,
  GetMusicDatabase: 14,
  GetPlaylists: 15,
  LoadPlaylist: 16,
  MenuAction: 17,
  RenamePlaylist: 18,
  SavePlaylist: 19,
  Search: 20,
  SetHates: 21,
  SetLikes: 22,
  SetMediaInfo: 23,
  SetPlaylists: 24,
  SetSaveMenu: 25,
  ShowFile: 26,
  ShowLocFromKey: 27,
  ShowMenu: 28,
  SubstrSearch: 29,
  TranscodingBegin: 30,
  UploadImage: 31,
  MinimizeWindow: 32,
  MaximizeWindow: 33,
  RestoreWindow: 34,
  CloseWindow: 35,
  GetPicUri: 36,
  GetIgnoreList: 37,
  AddIgnoreItem: 38,
  RemoveIgnoreItem: 39,
  PushIgnoreList: 40,
  IgnoreListId: 41,
});
export type IpcCall = (typeof IpcCall)[keyof typeof IpcCall];

export const IpcMsg = Object.freeze({
  TranscodingUpdate: 0,
  ManualRescan: 1,
  RescanInProgress: 2,
  RescanComplete: 3,
  MusicDBUpdate: 4,
  Unknown: 255,
});
export type IpcMsg = (typeof IpcMsg)[keyof typeof IpcMsg];

export const IgnoreItemType = Object.freeze({
  PathRoot: 'path-root',
  PathKeyword: 'path-keyword',
  DirName: 'dir-name',
});
export type IgnoreItemType =
  (typeof IgnoreItemType)[keyof typeof IgnoreItemType];

export const StorageId = Object.freeze({
  CurrentView: 'CurrentView',
  CurrentIndex: 'currentIndex',
  PlaybackOrder: 'playbackOrder',
  NowPlaying: 'nowPlaying',
  CurrentSongList: 'currentSongList',
  Shuffle: 'shuffle',
  Repeat: 'repeat',
  NeverPlayHates: 'neverPlayHates',
  OnlyPlayLikes: 'onlyPlayLikes',
  FullAlbumsOnly: 'FullAlbumsOnly',
  MinSongCount: 'MinSongCount',
  Mute: 'mute',
  LikedSongs: 'likedSongs',
  HatedSongs: 'hatedSongs',
  Volume: 'volume',
  Locations: 'locations',
  DefaultLocation: 'defaultLocation',
  SortWithArticles: 'rSortWithArticles',
  DownloadAlbumArtwork: 'downloadAlbumArtwork',
  DownloadArtistArtwork: 'downloadArtistArtwork',
  SaveAlbumArtworkWithMusic: 'saveAlbumArtworkWithMusic',
  AlbumCoverName: 'albumCoverName',
  TranscodingUpdate: 'get-xcode-update',
  TranscodeSrcLocDir: 'xcodeSrcLocDir',
  TranscodeSrcLocPlaylist: 'xcodeSrcLocPlaylist',
  TranscodeSrcLocArtist: 'xcodeSrcLocArtist',
  TranscodeSrcLocAlbum: 'xcodeSrcLocAlbum',
  TranscodeDestLoc: 'xcodeDestLoc',
  TranscodeBitRate: 'xcodeBitRate',
});
export type StorageId = (typeof StorageId)[keyof typeof StorageId];

export const TranscodeFormatTargetName = Object.freeze({
  m4a: 'm4a',
  mp3: 'mp3',
  aac: 'aac',
});
export type TranscodeFormatTargetName =
  (typeof TranscodeFormatTargetName)[keyof typeof TranscodeFormatTargetName];

export const TranscodeSource = Object.freeze({
  Playlist: 'p',
  Artist: 'r',
  Album: 'l',
  Disk: 'd',
});
export type TranscodeSource =
  (typeof TranscodeSource)[keyof typeof TranscodeSource];

export type TranscodeSourceLocation = {
  type: TranscodeSource;
  loc: string;
};

export type FileFailure = {
  file: string;
  error: string;
};

export type TranscodeState = {
  curStatus: string;
  filesTranscoded: string[];
  filesFound: number;
  filesPending: number;
  filesUntouched: number;
  filesFailed: FileFailure[];
  itemsRemoved: string[];
};

export type TranscodeInfo = {
  source: TranscodeSourceLocation;
  dest: string;
  artwork: boolean;
  mirror: boolean;
  format: TranscodeFormatTargetName;
  bitrate: number;
};

export type SongKey = string;

export type AlbumKey = string;

export type ArtistKey = string;

export type MediaKey = string;

export type PlaylistName = string;

export type Playlist = SongKey[];

export type Song = {
  key: SongKey;
  track: number;
  title: string;
  albumId: AlbumKey;
  artistIds: ArtistKey[];
  secondaryIds: ArtistKey[];
  variations: string[];
};

export const VAType = Object.freeze({
  None: 0,
  VA: 1,
  OST: 2,
});
export type VAType = (typeof VAType)[keyof typeof VAType];

export type Artist = {
  key: ArtistKey;
  name: string;
  albums: AlbumKey[];
  songs: SongKey[];
};

export type Album = {
  key: AlbumKey;
  year: number;
  title: string;
  vatype: VAType;
  primaryArtists: ArtistKey[];
  songs: SongKey[];
  diskNames: string[];
};

export type MediaInfo = {
  general: Map<string, string>;
  audio: Map<string, string>;
};

export type SimpleMetadata = {
  artist: string;
  album: string;
  year: string;
  track: string;
  title: string;
  discNum: string;
  discName: string;
  compilation: VAType;
};

export type FullMetadata = {
  originalPath: string;
  artist: string[];
  album: string;
  year: number;
  track: number;
  title: string;
  vaType: VAType;
  moreArtists: string[];
  variations: string[];
  disk: number;
  diskName: string;
};

export type AudioFileRegexPattern = {
  compilation: VAType;
  rgx: string;
};

export type MimeData = {
  type: string;
  data: string;
};

// End of generated code

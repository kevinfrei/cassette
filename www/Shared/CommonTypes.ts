// DO NOT EDIT THIS FILE DIRECTLY!!!
// This file is generated from www/Shared/Definitions.ts.
// If you need to change this file, edit www/Shared/Definitions.ts and
// regenerate it.
// DO NOT EDIT THIS FILE DIRECTLY!!!

// Generated by cassette v0.1.0

import * as TC from '@freik/typechk';

// TODO: Only emit the type checks that are needed

const chkIdlU16 = (v: unknown): v is number =>
  TC.isNumber(v) && v >= 0 && v <= 65535 && Number.isInteger(v);

const chkIdlI16 = (v: unknown): v is number =>
  TC.isNumber(v) && v >= -32768 && v <= 32767 && Number.isInteger(v);

const chkIdlI32 = (v: unknown): v is number =>
  TC.isNumber(v) && v >= -2147483648 && v <= 2147483647 && Number.isInteger(v);

function chkOptional<T>(chk: TC.typecheck<T>): TC.typecheck<T | undefined> {
  return (v: unknown): v is T | undefined => v === undefined || chk(v);
}

export const Keys = Object.freeze({
  AddFileLocation: 'O',
  Albums: '2',
  Artists: '3',
  Backward10s: '[',
  Find: 'F',
  Forward10s: ']',
  NextTrack: 'Right',
  NowPlaying: '1',
  Play: 'P',
  Playlists: '5',
  PreviousTrack: 'Left',
  Repeat: 'T',
  SavePlaylist: 'S',
  Settings: ',',
  Shuffle: 'R',
  Songs: '4',
  ToggleMiniPlayer: '9',
  Tools: 'L',
});
export type Keys = (typeof Keys)[keyof typeof Keys];
export function chkKeys(val: unknown): val is Keys {
  return TC.isString(val) && Object.values(Keys).includes(val as Keys);
}

export const StrId = Object.freeze({
  Mono: 'mono',
  Stereo: 'stereo',
  Quadrophonic: 'quadrophonic',
  Channels: ' channels',
  BitDepth: 'bit',
  FilePath: 'File Path',
  Duration: 'Duration:',
  MDHeaderField: 'Field',
  MDHeaderValue: 'Value',
  FilesSelected: 'Files Selected',
  RawMetadata: 'Raw Metadata',
  ChooseCoverArt: 'Select Cover Art Image',
  ImageName: 'Images',
  ErrNotSingleAndNotMultiple: 'Not Single and not Multiple (This is a bug!)',
  ErrSingleAndMultiple: 'Both Single and Multiple (This is a bug!)',
  Title: 'Title',
  ArtistTooltip:
    "Multiple artists are specified like this: 'Artist 1, Artist 2 & Artist 3'",
  Artists: 'Artist(s)',
  Album: 'Album',
  Year: 'Year',
  TrackNum: 'Track #',
  DiskNum: 'Disk #',
  DiskName: 'Disk Name',
  Compilation: 'Compilation',
  Soundtrack: 'Soundtrack',
  AdditionalArtists: 'Additional Artist(s)',
  VariationsTooltip: 'Separate vartiations with a semicolon',
  Variations: 'Variation(s)',
  AlbumCover: 'Album Cover',
  ChooseFile: 'Choose File...',
  FromClipboard: 'From Clipboard',
  ViewNowPlaying: 'Now Playing',
  ViewAlbums: 'Albums',
  ViewArtists: 'Artists',
  ViewSongs: 'All Songs',
  ViewPlaylists: 'Playlists',
  ViewSettings: 'Settings',
  ViewTools: 'Tools',
  ImportFiles: 'Import Files...',
});
export type StrId = (typeof StrId)[keyof typeof StrId];
export function chkStrId(val: unknown): val is StrId {
  return TC.isString(val) && Object.values(StrId).includes(val as StrId);
}

export const CurrentView = Object.freeze({
  disabled: -1,
  none: 0,
  recent: 1,
  albums: 2,
  artists: 3,
  songs: 4,
  playlists: 5,
  now_playing: 6,
  settings: 7,
  search: 8,
  tools: 9,
});
export type CurrentView = (typeof CurrentView)[keyof typeof CurrentView];
export function chkCurrentView(val: unknown): val is CurrentView {
  return (
    TC.isNumber(val) && Object.values(CurrentView).includes(val as CurrentView)
  );
}

export const IpcCall = Object.freeze({
  Unknown: 0,
  ReadFromStorage: 1,
  WriteToStorage: 2,
  DeleteFromStorage: 3,
  AsyncData: 4,
  IsDev: 5,
  ClearHates: 6,
  ClearLikes: 7,
  ClearLocalOverrides: 8,
  DeletePlaylist: 9,
  FlushImageCache: 10,
  FlushMetadataCache: 11,
  GetHates: 12,
  GetLikes: 13,
  GetMediaInfo: 14,
  GetMusicDatabase: 15,
  GetPlaylists: 16,
  LoadPlaylist: 17,
  MenuAction: 18,
  RenamePlaylist: 19,
  SavePlaylist: 20,
  Search: 21,
  SetHates: 22,
  SetLikes: 23,
  SetMediaInfo: 24,
  SetPlaylists: 25,
  SetSaveMenu: 26,
  ShowFile: 27,
  ShowLocFromKey: 28,
  ShowMenu: 29,
  SubstrSearch: 30,
  TranscodingBegin: 31,
  UploadImage: 32,
  MinimizeWindow: 33,
  MaximizeWindow: 34,
  RestoreWindow: 35,
  CloseWindow: 36,
  GetPicUri: 37,
  GetIgnoreList: 38,
  AddIgnoreItem: 39,
  RemoveIgnoreItem: 40,
  PushIgnoreList: 41,
  IgnoreListId: 42,
  ShowOpenDialog: 43,
});
export type IpcCall = (typeof IpcCall)[keyof typeof IpcCall];
export function chkIpcCall(val: unknown): val is IpcCall {
  return TC.isNumber(val) && Object.values(IpcCall).includes(val as IpcCall);
}

export const SocketMsg = Object.freeze({
  Unknown: 0,
  TranscodingUpdate: 1,
  ManualRescan: 2,
  RescanInProgress: 3,
  RescanComplete: 4,
  MusicDBUpdate: 5,
  ContentLoaded: 6,
  KeepAlive: 7,
});
export type SocketMsg = (typeof SocketMsg)[keyof typeof SocketMsg];
export function chkSocketMsg(val: unknown): val is SocketMsg {
  return (
    TC.isNumber(val) && Object.values(SocketMsg).includes(val as SocketMsg)
  );
}

export const IgnoreItemType = Object.freeze({
  PathRoot: 'path-root',
  PathKeyword: 'path-keyword',
  DirName: 'dir-name',
});
export type IgnoreItemType =
  (typeof IgnoreItemType)[keyof typeof IgnoreItemType];
export function chkIgnoreItemType(val: unknown): val is IgnoreItemType {
  return (
    TC.isString(val) &&
    Object.values(IgnoreItemType).includes(val as IgnoreItemType)
  );
}

export const StorageId = Object.freeze({
  CurrentView: 'currentView',
  Shuffle: 'shuffle',
  Repeat: 'repeat',
  CurrentIndex: 'currentIndex',
  Mute: 'mute',
  Volume: 'volume',
  PlaybackOrder: 'playbackOrder',
  NowPlaying: 'nowPlaying',
  CurrentSongList: 'currentSongList',
  Locations: 'locations',
  DefaultLocation: 'defaultLocation',
  OnlyPlayLikes: 'onlyPlayLikes',
  NeverPlayHates: 'neverPlayHates',
  FullAlbumsOnly: 'fullAlbumsOnly',
  MinSongCount: 'minSongCount',
  LikedSongs: 'likedSongs',
  HatedSongs: 'hatedSongs',
  SortWithArticles: 'sortWithArticles',
  DownloadAlbumArtwork: 'downloadAlbumArtwork',
  DownloadArtistArtwork: 'downloadArtistArtwork',
  SaveAlbumArtworkWithMusic: 'saveAlbumArtworkWithMusic',
  AlbumCoverName: 'albumCoverName',
  TranscodingUpdate: 'getTranscodeUpdate',
  TranscodeSrcLocDir: 'transcodeSrcLocDir',
  TranscodeSrcLocPlaylist: 'transcodeSrcLocPlaylist',
  TranscodeSrcLocArtist: 'transcodeSrcLocArtist',
  TranscodeSrcLocAlbum: 'transcodeSrcLocAlbum',
  TranscodeDestLoc: 'transcodeDestLoc',
  TranscodeBitRate: 'transcodeBitRate',
});
export type StorageId = (typeof StorageId)[keyof typeof StorageId];
export function chkStorageId(val: unknown): val is StorageId {
  return (
    TC.isString(val) && Object.values(StorageId).includes(val as StorageId)
  );
}

export const TranscodeFormatTargetName = Object.freeze({
  m4a: 'm4a',
  mp3: 'mp3',
  aac: 'aac',
});
export type TranscodeFormatTargetName =
  (typeof TranscodeFormatTargetName)[keyof typeof TranscodeFormatTargetName];
export function chkTranscodeFormatTargetName(
  val: unknown,
): val is TranscodeFormatTargetName {
  return (
    TC.isString(val) &&
    Object.values(TranscodeFormatTargetName).includes(
      val as TranscodeFormatTargetName,
    )
  );
}

export const TranscodeSource = Object.freeze({
  Playlist: 'p',
  Artist: 'r',
  Album: 'l',
  Disk: 'd',
});
export type TranscodeSource =
  (typeof TranscodeSource)[keyof typeof TranscodeSource];
export function chkTranscodeSource(val: unknown): val is TranscodeSource {
  return (
    TC.isString(val) &&
    Object.values(TranscodeSource).includes(val as TranscodeSource)
  );
}

export type TranscodeSourceLocation = {
  type: TranscodeSource;
  loc: string;
};
export const chkTranscodeSourceLocation: TC.typecheck<TranscodeSourceLocation> =
  TC.chkObjectOfType(
    {
      type: chkTranscodeSource,
      loc: TC.isString,
    },
    {},
  );

export type FileFailure = {
  file: string;
  error: string;
};
export const chkFileFailure: TC.typecheck<FileFailure> = TC.chkObjectOfType(
  {
    file: TC.isString,
    error: TC.isString,
  },
  {},
);

export type TranscodeState = {
  curStatus: string;
  filesTranscoded: string[];
  filesFound: number;
  filesPending: number;
  filesUntouched: number;
  filesFailed: FileFailure[];
  itemsRemoved: string[];
};
export const chkTranscodeState: TC.typecheck<TranscodeState> =
  TC.chkObjectOfType(
    {
      curStatus: TC.isString,
      filesTranscoded: TC.chkArrayOf(TC.isString),
      filesFound: chkIdlI32,
      filesPending: chkIdlI32,
      filesUntouched: chkIdlI32,
      filesFailed: TC.chkArrayOf(chkFileFailure),
      itemsRemoved: TC.chkArrayOf(TC.isString),
    },
    {},
  );

export type TranscodeInfo = {
  source: TranscodeSourceLocation;
  dest: string;
  artwork: boolean;
  mirror: boolean;
  format: TranscodeFormatTargetName;
  bitrate: number;
};
export const chkTranscodeInfo: TC.typecheck<TranscodeInfo> = TC.chkObjectOfType(
  {
    source: chkTranscodeSourceLocation,
    dest: TC.isString,
    artwork: TC.isBoolean,
    mirror: TC.isBoolean,
    format: chkTranscodeFormatTargetName,
    bitrate: chkIdlU16,
  },
  {},
);

export type SongKey = string;
export const chkSongKey = TC.isString;

export type AlbumKey = string;
export const chkAlbumKey = TC.isString;

export type ArtistKey = string;
export const chkArtistKey = TC.isString;

export type MediaKey = string;
export const chkMediaKey = TC.isString;

export type PlaylistName = string;
export const chkPlaylistName = TC.isString;

export type Playlist = SongKey[];
export const chkPlaylist = TC.chkArrayOf(chkSongKey);

export type Song = {
  key: SongKey;
  track: number;
  title: string;
  albumId: AlbumKey;
  artistIds: ArtistKey[];
  secondaryIds: ArtistKey[];
  variations: string[];
};
export const chkSong: TC.typecheck<Song> = TC.chkObjectOfType(
  {
    key: chkSongKey,
    track: chkIdlI16,
    title: TC.isString,
    albumId: chkAlbumKey,
    artistIds: TC.chkArrayOf(chkArtistKey),
    secondaryIds: TC.chkArrayOf(chkArtistKey),
    variations: TC.chkArrayOf(TC.isString),
  },
  {},
);

export type SongWithPath = Song & {
  path: string;
};
export const chkSongWithPath: TC.typecheck<SongWithPath> = TC.chkAllOf(
  chkSong,
  TC.chkFieldOf('path', TC.isString),
);

export const VAType = Object.freeze({
  none: 'None',
  va: 'VA',
  ost: 'OST',
});
export type VAType = (typeof VAType)[keyof typeof VAType];
export function chkVAType(val: unknown): val is VAType {
  return TC.isString(val) && Object.values(VAType).includes(val as VAType);
}

export type Artist = {
  key: ArtistKey;
  name: string;
  albums: AlbumKey[];
  songs: SongKey[];
};
export const chkArtist: TC.typecheck<Artist> = TC.chkObjectOfType(
  {
    key: chkArtistKey,
    name: TC.isString,
    albums: TC.chkArrayOf(chkAlbumKey),
    songs: TC.chkArrayOf(chkSongKey),
  },
  {},
);

export type Album = {
  key: AlbumKey;
  year: number;
  title: string;
  vatype: VAType;
  primaryArtists: ArtistKey[];
  songs: SongKey[];
  diskNames: string[];
};
export const chkAlbum: TC.typecheck<Album> = TC.chkObjectOfType(
  {
    key: chkAlbumKey,
    year: chkIdlI16,
    title: TC.isString,
    vatype: chkVAType,
    primaryArtists: TC.chkArrayOf(chkArtistKey),
    songs: TC.chkArrayOf(chkSongKey),
    diskNames: TC.chkArrayOf(TC.isString),
  },
  {},
);

export type MediaInfo = {
  general: Map<string, string>;
  audio: Map<string, string>;
};
export const chkMediaInfo: TC.typecheck<MediaInfo> = TC.chkObjectOfType(
  {
    general: TC.chkMapOf(TC.isString, TC.isString),
    audio: TC.chkMapOf(TC.isString, TC.isString),
  },
  {},
);

export type SimpleMetadata = {
  artist: string;
  album: string;
  year: string;
  track: string;
  title: string;
  discNum: string;
  discName: string;
  compilation: VAType;
};
export const chkSimpleMetadata: TC.typecheck<SimpleMetadata> =
  TC.chkObjectOfType(
    {
      artist: TC.isString,
      album: TC.isString,
      year: TC.isString,
      track: TC.isString,
      title: TC.isString,
      discNum: TC.isString,
      discName: TC.isString,
      compilation: chkVAType,
    },
    {},
  );

export type FullMetadata = {
  originalPath: string;
  artist: string[];
  album: string;
  year: number;
  track: number;
  title: string;
  vaType: VAType;
  moreArtists: string[];
  variations: string[];
  disk: number;
  diskName: string;
};
export const chkFullMetadata: TC.typecheck<FullMetadata> = TC.chkObjectOfType(
  {
    originalPath: TC.isString,
    artist: TC.chkArrayOf(TC.isString),
    album: TC.isString,
    year: chkIdlI16,
    track: chkIdlI16,
    title: TC.isString,
    vaType: chkVAType,
    moreArtists: TC.chkArrayOf(TC.isString),
    variations: TC.chkArrayOf(TC.isString),
    disk: chkIdlI16,
    diskName: TC.isString,
  },
  {},
);

export type AudioFileRegexPattern = {
  compilation: VAType;
  rgx: string;
};
export const chkAudioFileRegexPattern: TC.typecheck<AudioFileRegexPattern> =
  TC.chkObjectOfType(
    {
      compilation: chkVAType,
      rgx: TC.isString,
    },
    {},
  );

export type MimeData = {
  type: string;
  data: string;
};
export const chkMimeData: TC.typecheck<MimeData> = TC.chkObjectOfType(
  {
    type: TC.isString,
    data: TC.isString,
  },
  {},
);

export type MusicDatabase = {
  artists: Map<ArtistKey, Artist>;
  albums: Map<AlbumKey, Album>;
  songs: Map<SongKey, Song>;
  playlists: Map<string, Playlist>;
};
export const chkMusicDatabase: TC.typecheck<MusicDatabase> = TC.chkObjectOfType(
  {
    artists: TC.chkMapOf(chkArtistKey, chkArtist),
    albums: TC.chkMapOf(chkAlbumKey, chkAlbum),
    songs: TC.chkMapOf(chkSongKey, chkSong),
    playlists: TC.chkMapOf(TC.isString, chkPlaylist),
  },
  {},
);

export type FileFilterItem = {
  name: string;
  extensions: string[];
};
export const chkFileFilterItem: TC.typecheck<FileFilterItem> =
  TC.chkObjectOfType(
    {
      name: TC.isString,
      extensions: TC.chkArrayOf(TC.isString),
    },
    {},
  );

export type OpenDialogOptions = {
  folder?: boolean;
  title?: string;
  defaultPath?: string;
  buttonLabel?: string;
  multiSelections?: boolean;
  filters?: FileFilterItem[];
};
export const chkOpenDialogOptions: TC.typecheck<OpenDialogOptions> =
  TC.chkObjectOfType(
    {},
    {
      folder: chkOptional(TC.isBoolean),
      title: chkOptional(TC.isString),
      defaultPath: chkOptional(TC.isString),
      buttonLabel: chkOptional(TC.isString),
      multiSelections: chkOptional(TC.isBoolean),
      filters: chkOptional(TC.chkArrayOf(chkFileFilterItem)),
    },
  );

export type SearchResults = {
  songs: SongKey[];
  artists: ArtistKey[];
  albums: AlbumKey[];
};
export const chkSearchResults: TC.typecheck<SearchResults> = TC.chkObjectOfType(
  {
    songs: TC.chkArrayOf(chkSongKey),
    artists: TC.chkArrayOf(chkArtistKey),
    albums: TC.chkArrayOf(chkAlbumKey),
  },
  {},
);

// End of generated code
